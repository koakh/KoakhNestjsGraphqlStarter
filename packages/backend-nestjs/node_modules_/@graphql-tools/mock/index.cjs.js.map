{"version":3,"file":"index.cjs.js","sources":["../../../dist/mock/src/types.js","../../../dist/mock/src/utils.js","../../../dist/mock/src/MockList.js","../../../dist/mock/src/MockStore.js","../../../dist/mock/src/addMocksToSchema.js","../../../dist/mock/src/mockServer.js","../../../dist/mock/src/index.js"],"sourcesContent":["export function isRef(maybeRef) {\n    return maybeRef && typeof maybeRef === 'object' && maybeRef.hasOwnProperty('$ref');\n}\nexport function assertIsRef(maybeRef, message) {\n    if (!isRef(maybeRef)) {\n        throw new Error(message || `Expected ${maybeRef} to be a valid Ref.`);\n    }\n}\nexport function isRecord(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\n//# sourceMappingURL=types.js.map","export function uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = (Math.random() * 16) | 0;\n        // eslint-disable-next-line eqeqeq\n        const v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexport const randomListLength = () => {\n    // Mocking has always returned list of length 2 by default\n    // return 1 + Math.round(Math.random() * 10)\n    return 2;\n};\nexport const takeRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];\nexport function makeRef(typeName, key) {\n    return { $ref: { key, typeName } };\n}\nexport function isObject(thing) {\n    return thing === Object(thing) && !Array.isArray(thing);\n}\nexport function copyOwnPropsIfNotPresent(target, source) {\n    Object.getOwnPropertyNames(source).forEach(prop => {\n        if (!Object.getOwnPropertyDescriptor(target, prop)) {\n            const propertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);\n            Object.defineProperty(target, prop, propertyDescriptor == null ? {} : propertyDescriptor);\n        }\n    });\n}\nexport function copyOwnProps(target, ...sources) {\n    sources.forEach(source => {\n        let chain = source;\n        while (chain != null) {\n            copyOwnPropsIfNotPresent(target, chain);\n            chain = Object.getPrototypeOf(chain);\n        }\n    });\n    return target;\n}\n//# sourceMappingURL=utils.js.map","/**\n * @internal\n */\nexport function isMockList(obj) {\n    if (typeof (obj === null || obj === void 0 ? void 0 : obj.len) === 'number' || (Array.isArray(obj === null || obj === void 0 ? void 0 : obj.len) && typeof (obj === null || obj === void 0 ? void 0 : obj.len[0]) === 'number')) {\n        if (typeof obj.wrappedFunction === 'undefined' || typeof obj.wrappedFunction === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * This is an object you can return from your mock resolvers which calls the\n * provided `mockFunction` once for each list item.\n */\nexport class MockList {\n    /**\n     * @param length Either the exact length of items to return or an inclusive\n     * range of possible lengths.\n     * @param mockFunction The function to call for each item in the list to\n     * resolve it. It can return another MockList or a value.\n     */\n    constructor(length, mockFunction) {\n        this.len = length;\n        if (typeof mockFunction !== 'undefined') {\n            if (typeof mockFunction !== 'function') {\n                throw new Error('Second argument to MockList must be a function or undefined');\n            }\n            this.wrappedFunction = mockFunction;\n        }\n    }\n    /**\n     * @internal\n     */\n    mock() {\n        let arr;\n        if (Array.isArray(this.len)) {\n            arr = new Array(this.randint(this.len[0], this.len[1]));\n        }\n        else {\n            arr = new Array(this.len);\n        }\n        for (let i = 0; i < arr.length; i++) {\n            if (typeof this.wrappedFunction === 'function') {\n                const res = this.wrappedFunction();\n                if (isMockList(res)) {\n                    arr[i] = res.mock();\n                }\n                else {\n                    arr[i] = res;\n                }\n            }\n            else {\n                arr[i] = undefined;\n            }\n        }\n        return arr;\n    }\n    randint(low, high) {\n        return Math.floor(Math.random() * (high - low + 1) + low);\n    }\n}\nexport function deepResolveMockList(mockList) {\n    return mockList.mock().map(v => {\n        if (isMockList(v))\n            return deepResolveMockList(v);\n        return v;\n    });\n}\n//# sourceMappingURL=MockList.js.map","import { GraphQLString, isObjectType, isScalarType, getNullableType, isListType, isEnumType, isAbstractType, isCompositeType, isNullableType, isInterfaceType, } from 'graphql';\nimport { assertIsDefined } from 'ts-is-defined';\nimport stringify from 'fast-json-stable-stringify';\nimport { isRef, assertIsRef, isRecord, } from './types';\nimport { uuidv4, randomListLength, takeRandom, makeRef } from './utils';\nimport { deepResolveMockList, isMockList } from './MockList';\nexport const defaultMocks = {\n    Int: () => Math.round(Math.random() * 200) - 100,\n    Float: () => Math.random() * 200 - 100,\n    String: () => 'Hello World',\n    Boolean: () => Math.random() > 0.5,\n    ID: () => uuidv4(),\n};\nexport class MockStore {\n    constructor({ schema, mocks, typePolicies, }) {\n        this.store = {};\n        this.schema = schema;\n        this.mocks = { ...defaultMocks, ...mocks };\n        this.typePolicies = typePolicies || {};\n    }\n    get(_typeName, _key, _fieldName, _fieldArgs) {\n        if (typeof _typeName !== 'string') {\n            if (_key === undefined) {\n                if (isRef(_typeName)) {\n                    throw new Error(\"Can't provide a ref as first argument and no other argument\");\n                }\n                // get({...})\n                return this.getImpl(_typeName);\n            }\n            else {\n                assertIsRef(_typeName);\n                const { $ref } = _typeName;\n                // arguments shift\n                _fieldArgs = _fieldName;\n                _fieldName = _key;\n                _key = $ref.key;\n                _typeName = $ref.typeName;\n            }\n        }\n        const args = {\n            typeName: _typeName,\n        };\n        if (isRecord(_key) || _key === undefined) {\n            // get('User', { name: 'Alex'})\n            args.defaultValue = _key;\n            return this.getImpl(args);\n        }\n        args.key = _key;\n        if (Array.isArray(_fieldName) && _fieldName.length === 1) {\n            _fieldName = _fieldName[0];\n        }\n        if (typeof _fieldName !== 'string' && !Array.isArray(_fieldName)) {\n            // get('User', 'me', { name: 'Alex'})\n            args.defaultValue = _fieldName;\n            return this.getImpl(args);\n        }\n        if (Array.isArray(_fieldName)) {\n            // get('User', 'me', ['father', 'name'])\n            const ref = this.get(_typeName, _key, _fieldName[0], _fieldArgs);\n            assertIsRef(ref);\n            return this.get(ref.$ref.typeName, ref.$ref.key, _fieldName.slice(1, _fieldName.length));\n        }\n        // get('User', 'me', 'name'...);\n        args.fieldName = _fieldName;\n        args.fieldArgs = _fieldArgs;\n        return this.getImpl(args);\n    }\n    set(_typeName, _key, _fieldName, _value) {\n        if (typeof _typeName !== 'string') {\n            if (_key === undefined) {\n                if (isRef(_typeName)) {\n                    throw new Error(\"Can't provide a ref as first argument and no other argument\");\n                }\n                // set({...})\n                return this.setImpl(_typeName);\n            }\n            else {\n                assertIsRef(_typeName);\n                const { $ref } = _typeName;\n                // arguments shift\n                _value = _fieldName;\n                _fieldName = _key;\n                _key = $ref.key;\n                _typeName = $ref.typeName;\n            }\n        }\n        assertIsDefined(_key, 'key was not provided');\n        const args = {\n            typeName: _typeName,\n            key: _key,\n        };\n        if (typeof _fieldName !== 'string') {\n            // set('User', 1, { name: 'Foo' })\n            if (!isRecord(_fieldName))\n                throw new Error('Expected value to be a record');\n            args.value = _fieldName;\n            return this.setImpl(args);\n        }\n        args.fieldName = _fieldName;\n        args.value = _value;\n        return this.setImpl(args);\n    }\n    reset() {\n        this.store = {};\n    }\n    getImpl(args) {\n        const { typeName, key, fieldName, fieldArgs, defaultValue } = args;\n        if (!fieldName) {\n            if (defaultValue !== undefined && !isRecord(defaultValue)) {\n                throw new Error('`defaultValue` should be an object');\n            }\n            let valuesToInsert = defaultValue || {};\n            if (key) {\n                valuesToInsert = { ...valuesToInsert, ...makeRef(typeName, key) };\n            }\n            return this.insert(typeName, valuesToInsert, true);\n        }\n        assertIsDefined(key, 'key argument should be given when fieldName is given');\n        const fieldNameInStore = getFieldNameInStore(fieldName, fieldArgs);\n        if (this.store[typeName] === undefined ||\n            this.store[typeName][key] === undefined ||\n            this.store[typeName][key][fieldNameInStore] === undefined) {\n            let value;\n            if (defaultValue !== undefined) {\n                value = defaultValue;\n            }\n            else if (this.isKeyField(typeName, fieldName)) {\n                value = key;\n            }\n            else {\n                value = this.generateFieldValue(typeName, fieldName, (otherFieldName, otherValue) => {\n                    // if we get a key field in the mix we don't care\n                    if (this.isKeyField(typeName, otherFieldName))\n                        return;\n                    this.set({ typeName, key, fieldName: otherFieldName, value: otherValue, noOverride: true });\n                });\n            }\n            this.set({ typeName, key, fieldName, fieldArgs, value, noOverride: true });\n        }\n        return this.store[typeName][key][fieldNameInStore];\n    }\n    setImpl(args) {\n        const { typeName, key, fieldName, fieldArgs, noOverride } = args;\n        let { value } = args;\n        if (isMockList(value)) {\n            value = deepResolveMockList(value);\n        }\n        if (!fieldName) {\n            if (!isRecord(value)) {\n                throw new Error('When no `fieldName` is provided, `value` should be a record.');\n            }\n            for (const fieldName of Object.keys(value)) {\n                this.setImpl({\n                    typeName,\n                    key,\n                    fieldName,\n                    value: value[fieldName],\n                    noOverride,\n                });\n            }\n            return;\n        }\n        const fieldNameInStore = getFieldNameInStore(fieldName, fieldArgs);\n        if (this.isKeyField(typeName, fieldName) && value !== key) {\n            throw new Error(`Field ${fieldName} is a key field of ${typeName} and you are trying to set it to ${value} while the key is ${key}`);\n        }\n        if (this.store[typeName] === undefined) {\n            this.store[typeName] = {};\n        }\n        if (this.store[typeName][key] === undefined) {\n            this.store[typeName][key] = {};\n        }\n        // if already set and we don't override\n        if (this.store[typeName][key][fieldNameInStore] !== undefined && noOverride) {\n            return;\n        }\n        const fieldType = this.getFieldType(typeName, fieldName);\n        const currentValue = this.store[typeName][key][fieldNameInStore];\n        let valueToStore;\n        try {\n            valueToStore = this.normalizeValueToStore(fieldType, value, currentValue, (typeName, values) => this.insert(typeName, values, noOverride));\n        }\n        catch (e) {\n            throw new Error(`Value to set in ${typeName}.${fieldName} in not normalizable: ${e.message}`);\n        }\n        this.store[typeName][key] = {\n            ...this.store[typeName][key],\n            [fieldNameInStore]: valueToStore,\n        };\n    }\n    normalizeValueToStore(fieldType, value, currentValue, onInsertType) {\n        const fieldTypeName = fieldType.toString();\n        if (value === null) {\n            if (!isNullableType(fieldType)) {\n                throw new Error(`should not be null because ${fieldTypeName} is not nullable. Received null.`);\n            }\n            return null;\n        }\n        const nullableFieldType = getNullableType(fieldType);\n        if (value === undefined)\n            return this.generateValueFromType(nullableFieldType);\n        // deal with nesting insert\n        if (isCompositeType(nullableFieldType)) {\n            if (!isRecord(value))\n                throw new Error(`should be an object or null or undefined. Received ${value}`);\n            let joinedTypeName;\n            if (isAbstractType(nullableFieldType)) {\n                if (isRef(value)) {\n                    joinedTypeName = value.$ref.typeName;\n                }\n                else {\n                    if (typeof value['__typename'] !== 'string') {\n                        throw new Error(`should contain a '__typename' because ${nullableFieldType.name} an abstract type`);\n                    }\n                    joinedTypeName = value['__typename'];\n                }\n            }\n            else {\n                joinedTypeName = nullableFieldType.name;\n            }\n            return onInsertType(joinedTypeName, isRef(currentValue) ? { ...currentValue, ...value } : value);\n        }\n        if (isListType(nullableFieldType)) {\n            if (!Array.isArray(value))\n                throw new Error(`should be an array or null or undefined. Received ${value}`);\n            return value.map((v, index) => {\n                return this.normalizeValueToStore(nullableFieldType.ofType, v, currentValue && currentValue[index] ? currentValue : undefined, onInsertType);\n            });\n        }\n        return value;\n    }\n    insert(typeName, values, noOverride) {\n        const keyFieldName = this.getKeyFieldName(typeName);\n        let key;\n        // when we generate a key for the type, we might produce\n        // other associated values with it\n        // We keep track of them and we'll insert them, with propririty\n        // for the ones that we areasked to insert\n        const otherValues = {};\n        if (isRef(values)) {\n            key = values.$ref.key;\n        }\n        else if (keyFieldName && keyFieldName in values) {\n            key = values[keyFieldName];\n        }\n        else {\n            key = this.generateKeyForType(typeName, (otherFieldName, otherFieldValue) => {\n                otherValues[otherFieldName] = otherFieldValue;\n            });\n        }\n        const toInsert = { ...otherValues, ...values };\n        for (const fieldName of Object.keys(toInsert)) {\n            if (fieldName === '$ref')\n                continue;\n            if (fieldName === '__typename')\n                continue;\n            this.set({\n                typeName,\n                key,\n                fieldName,\n                value: toInsert[fieldName],\n                noOverride,\n            });\n        }\n        return makeRef(typeName, key);\n    }\n    generateFieldValue(typeName, fieldName, onOtherFieldsGenerated) {\n        const mockedValue = this.generateFieldValueFromMocks(typeName, fieldName, onOtherFieldsGenerated);\n        if (mockedValue !== undefined)\n            return mockedValue;\n        const fieldType = this.getFieldType(typeName, fieldName);\n        return this.generateValueFromType(fieldType);\n    }\n    generateFieldValueFromMocks(typeName, fieldName, onOtherFieldsGenerated) {\n        let value;\n        const mock = this.mocks ? this.mocks[typeName] : undefined;\n        if (mock) {\n            if (typeof mock === 'function') {\n                const values = mock();\n                if (typeof values !== 'object' || values == null) {\n                    throw new Error(`Value returned by the mock for ${typeName} is not an object`);\n                }\n                for (const otherFieldName of Object.keys(values)) {\n                    if (otherFieldName === fieldName)\n                        continue;\n                    if (typeof values[otherFieldName] === 'function')\n                        continue;\n                    onOtherFieldsGenerated && onOtherFieldsGenerated(otherFieldName, values[otherFieldName]);\n                }\n                value = values[fieldName];\n                if (typeof value === 'function')\n                    value = value();\n            }\n            else if (typeof mock[fieldName] === 'function') {\n                value = mock[fieldName]();\n            }\n        }\n        if (value !== undefined)\n            return value;\n        const type = this.getType(typeName);\n        // GraphQL 14 Compatibility\n        const interfaces = 'getInterfaces' in type ? type.getInterfaces() : [];\n        if (interfaces.length > 0) {\n            for (const interface_ of interfaces) {\n                if (value)\n                    break;\n                value = this.generateFieldValueFromMocks(interface_.name, fieldName, onOtherFieldsGenerated);\n            }\n        }\n        return value;\n    }\n    generateKeyForType(typeName, onOtherFieldsGenerated) {\n        const keyFieldName = this.getKeyFieldName(typeName);\n        if (!keyFieldName)\n            return uuidv4();\n        return this.generateFieldValue(typeName, keyFieldName, onOtherFieldsGenerated);\n    }\n    generateValueFromType(fieldType) {\n        const nullableType = getNullableType(fieldType);\n        if (isScalarType(nullableType)) {\n            const mockFn = this.mocks[nullableType.name];\n            if (typeof mockFn !== 'function')\n                throw new Error(`No mock defined for type \"${nullableType.name}\"`);\n            return mockFn();\n        }\n        else if (isEnumType(nullableType)) {\n            const mockFn = this.mocks[nullableType.name];\n            if (typeof mockFn === 'function')\n                return mockFn();\n            const values = nullableType.getValues().map(v => v.value);\n            return takeRandom(values);\n        }\n        else if (isObjectType(nullableType)) {\n            // this will create a new random ref\n            return this.insert(nullableType.name, {});\n        }\n        else if (isListType(nullableType)) {\n            return [...new Array(randomListLength())].map(() => this.generateValueFromType(nullableType.ofType));\n        }\n        else if (isAbstractType(nullableType)) {\n            const mock = this.mocks[nullableType.name];\n            let typeName;\n            let values = {};\n            if (!mock) {\n                typeName = takeRandom(this.schema.getPossibleTypes(nullableType).map(t => t.name));\n            }\n            else if (typeof mock === 'function') {\n                const mockRes = mock();\n                if (mockRes === null)\n                    return null;\n                if (!isRecord(mockRes)) {\n                    throw new Error(`Value returned by the mock for ${nullableType.name} is not an object or null`);\n                }\n                values = mockRes;\n                if (typeof values['__typename'] !== 'string') {\n                    throw new Error(`Please return a __typename in \"${nullableType.name}\"`);\n                }\n                typeName = values['__typename'];\n            }\n            else if (typeof mock['__typename'] === 'function') {\n                const mockRes = mock['__typename']();\n                if (typeof mockRes !== 'string')\n                    throw new Error(`'__typename' returned by the mock for abstract type ${nullableType.name} is not a string`);\n                typeName = mockRes;\n            }\n            else {\n                throw new Error(`Please return a __typename in \"${nullableType.name}\"`);\n            }\n            const toInsert = {};\n            for (const fieldName of Object.keys(values)) {\n                if (fieldName === '__typename')\n                    continue;\n                const fieldValue = values[fieldName];\n                toInsert[fieldName] = typeof fieldValue === 'function' ? fieldValue() : fieldValue;\n            }\n            return this.insert(typeName, toInsert);\n        }\n        else {\n            throw new Error(`${nullableType} not implemented`);\n        }\n    }\n    getFieldType(typeName, fieldName) {\n        if (fieldName === '__typename') {\n            return GraphQLString;\n        }\n        const type = this.getType(typeName);\n        const field = type.getFields()[fieldName];\n        if (!field) {\n            throw new Error(`${fieldName} does not exist on type ${typeName}`);\n        }\n        return field.type;\n    }\n    getType(typeName) {\n        const type = this.schema.getType(typeName);\n        if (!type || !(isObjectType(type) || isInterfaceType(type))) {\n            throw new Error(`${typeName} does not exist on schema or is not an object or interface`);\n        }\n        return type;\n    }\n    isKeyField(typeName, fieldName) {\n        return this.getKeyFieldName(typeName) === fieldName;\n    }\n    getKeyFieldName(typeName) {\n        var _a;\n        const typePolicyKeyField = (_a = this.typePolicies[typeName]) === null || _a === void 0 ? void 0 : _a.keyFieldName;\n        if (typePolicyKeyField !== undefined) {\n            if (typePolicyKeyField === false)\n                return null;\n            return typePolicyKeyField;\n        }\n        const gqlType = this.getType(typeName);\n        const fieldNames = Object.keys(gqlType.getFields());\n        if (fieldNames.includes('id'))\n            return 'id';\n        if (fieldNames.includes('_id'))\n            return '+id';\n        return null;\n    }\n}\nconst getFieldNameInStore = (fieldName, fieldArgs) => {\n    if (!fieldArgs)\n        return fieldName;\n    if (typeof fieldArgs === 'string') {\n        return `${fieldName}:${fieldArgs}`;\n    }\n    // empty args\n    if (Object.keys(fieldArgs).length === 0) {\n        return fieldName;\n    }\n    return `${fieldName}:${stringify(fieldArgs)}`;\n};\n//# sourceMappingURL=MockStore.js.map","import { defaultFieldResolver, isUnionType, GraphQLUnionType, GraphQLInterfaceType, isSchema, } from 'graphql';\nimport { mapSchema, MapperKind } from '@graphql-tools/utils';\nimport { addResolversToSchema } from '@graphql-tools/schema';\nimport { isRef } from './types';\nimport { copyOwnProps, isObject } from './utils';\nimport { createMockStore } from '.';\n// todo: add option to preserve resolver\n/**\n * Given a `schema` and a `MockStore`, returns an executable schema that\n * will use the provided `MockStore` to execute queries.\n *\n * ```ts\n * const schema = buildSchema(`\n *  type User {\n *    id: ID!\n *    name: String!\n *  }\n *  type Query {\n *    me: User!\n *  }\n * `)\n *\n * const store = createMockStore({ schema });\n * const mockedSchema = addMocksToSchema({ schema, store });\n * ```\n *\n *\n * If a `resolvers` parameter is passed, the query execution will use\n * the provided `resolvers` if, one exists, instead of the default mock\n * resolver.\n *\n *\n * ```ts\n * const schema = buildSchema(`\n *   type User {\n *     id: ID!\n *     name: String!\n *   }\n *   type Query {\n *     me: User!\n *   }\n *   type Mutation {\n *     setMyName(newName: String!): User!\n *   }\n * `)\n *\n * const store = createMockStore({ schema });\n * const mockedSchema = addMocksToSchema({\n *   schema,\n *   store,\n *   resolvers: {\n *     Mutation: {\n *       setMyName: (_, { newName }) => {\n *          const ref = store.get('Query', 'ROOT', 'viewer');\n *          store.set(ref, 'name', newName);\n *          return ref;\n *       }\n *     }\n *   }\n *  });\n * ```\n *\n *\n * `Query` and `Mutation` type will use `key` `'ROOT'`.\n */\nexport function addMocksToSchema({ schema, store: maybeStore, mocks, typePolicies, resolvers: resolversOrFnResolvers, preserveResolvers = false, }) {\n    if (!schema) {\n        throw new Error('Must provide schema to mock');\n    }\n    if (!isSchema(schema)) {\n        throw new Error('Value at \"schema\" must be of type GraphQLSchema');\n    }\n    if (mocks && !isObject(mocks)) {\n        throw new Error('mocks must be of type Object');\n    }\n    const store = maybeStore ||\n        createMockStore({\n            schema,\n            mocks,\n            typePolicies,\n        });\n    const resolvers = typeof resolversOrFnResolvers === 'function' ? resolversOrFnResolvers(store) : resolversOrFnResolvers;\n    const mockResolver = (source, args, contex, info) => {\n        const defaultResolvedValue = defaultFieldResolver(source, args, contex, info);\n        // priority to default resolved value\n        if (defaultResolvedValue !== undefined)\n            return defaultResolvedValue;\n        if (isRef(source)) {\n            return store.get({\n                typeName: source.$ref.typeName,\n                key: source.$ref.key,\n                fieldName: info.fieldName,\n                fieldArgs: args,\n            });\n        }\n        // we have to handle the root mutation, root query and root subscription types\n        // differently, because no resolver is called at the root\n        if (isRootType(info.parentType, info.schema)) {\n            return store.get({\n                typeName: info.parentType.name,\n                key: 'ROOT',\n                fieldName: info.fieldName,\n                fieldArgs: args,\n            });\n        }\n        return undefined;\n    };\n    const typeResolver = data => {\n        if (isRef(data)) {\n            return data.$ref.typeName;\n        }\n    };\n    const mockSubscriber = () => ({\n        [Symbol.asyncIterator]() {\n            return {\n                async next() {\n                    return {\n                        done: true,\n                        value: {},\n                    };\n                },\n            };\n        },\n    });\n    const schemaWithMocks = mapSchema(schema, {\n        [MapperKind.OBJECT_FIELD]: fieldConfig => {\n            const newFieldConfig = {\n                ...fieldConfig,\n            };\n            const oldResolver = fieldConfig.resolve;\n            if (!preserveResolvers || !oldResolver) {\n                newFieldConfig.resolve = mockResolver;\n            }\n            else {\n                newFieldConfig.resolve = async (rootObject, args, context, info) => {\n                    const [mockedValue, resolvedValue] = await Promise.all([\n                        mockResolver(rootObject, args, context, info),\n                        oldResolver(rootObject, args, context, info),\n                    ]);\n                    // In case we couldn't mock\n                    if (mockedValue instanceof Error) {\n                        // only if value was not resolved, populate the error.\n                        if (undefined === resolvedValue) {\n                            throw mockedValue;\n                        }\n                        return resolvedValue;\n                    }\n                    if (resolvedValue instanceof Date && mockedValue instanceof Date) {\n                        return undefined !== resolvedValue ? resolvedValue : mockedValue;\n                    }\n                    if (isObject(mockedValue) && isObject(resolvedValue)) {\n                        // Object.assign() won't do here, as we need to all properties, including\n                        // the non-enumerable ones and defined using Object.defineProperty\n                        const emptyObject = Object.create(Object.getPrototypeOf(resolvedValue));\n                        return copyOwnProps(emptyObject, resolvedValue, mockedValue);\n                    }\n                    return undefined !== resolvedValue ? resolvedValue : mockedValue;\n                };\n            }\n            const fieldSubscriber = fieldConfig.subscribe;\n            if (!preserveResolvers || !fieldSubscriber) {\n                newFieldConfig.subscribe = mockSubscriber;\n            }\n            else {\n                newFieldConfig.subscribe = async (rootObject, args, context, info) => {\n                    const [mockAsyncIterable, oldAsyncIterable] = await Promise.all([\n                        mockSubscriber(rootObject, args, context, info),\n                        fieldSubscriber(rootObject, args, context, info),\n                    ]);\n                    return oldAsyncIterable || mockAsyncIterable;\n                };\n            }\n            return newFieldConfig;\n        },\n        [MapperKind.ABSTRACT_TYPE]: type => {\n            if (preserveResolvers && type.resolveType != null && type.resolveType.length) {\n                return;\n            }\n            if (isUnionType(type)) {\n                return new GraphQLUnionType({\n                    ...type.toConfig(),\n                    resolveType: typeResolver,\n                });\n            }\n            else {\n                return new GraphQLInterfaceType({\n                    ...type.toConfig(),\n                    resolveType: typeResolver,\n                });\n            }\n        },\n    });\n    return resolvers ? addResolversToSchema(schemaWithMocks, resolvers) : schemaWithMocks;\n}\nconst isRootType = (type, schema) => {\n    const queryType = schema.getQueryType();\n    const isOnQueryType = queryType != null && queryType.name === type.name;\n    const mutationType = schema.getMutationType();\n    const isOnMutationType = mutationType != null && mutationType.name === type.name;\n    const subscriptionType = schema.getSubscriptionType();\n    const isOnSubscriptionType = subscriptionType != null && subscriptionType.name === type.name;\n    return isOnQueryType || isOnMutationType || isOnSubscriptionType;\n};\n//# sourceMappingURL=addMocksToSchema.js.map","import { isSchema, graphql } from 'graphql';\nimport { buildSchemaFromTypeDefinitions } from '@graphql-tools/schema';\nimport { addMocksToSchema } from './addMocksToSchema';\n/**\n * A convenience wrapper on top of addMocksToSchema. It adds your mock resolvers\n * to your schema and returns a client that will correctly execute your query with\n * variables. Note: when executing queries from the returned server, context and\n * root will both equal `{}`.\n * @param schema The schema to which to add mocks. This can also be a set of type\n * definitions instead.\n * @param mocks The mocks to add to the schema.\n * @param preserveResolvers Set to `true` to prevent existing resolvers from being\n * overwritten to provide mock data. This can be used to mock some parts of the\n * server and not others.\n */\nexport function mockServer(schema, mocks, preserveResolvers = false) {\n    let mySchema;\n    if (!isSchema(schema)) {\n        // TODO: provide useful error messages here if this fails\n        mySchema = buildSchemaFromTypeDefinitions(schema);\n    }\n    else {\n        mySchema = schema;\n    }\n    mySchema = addMocksToSchema({ schema: mySchema, mocks, preserveResolvers });\n    return { query: (query, vars) => graphql(mySchema, query, {}, {}, vars) };\n}\n//# sourceMappingURL=mockServer.js.map","import { MockStore } from './MockStore';\nexport * from './MockStore';\nexport * from './addMocksToSchema';\nexport * from './mockServer';\nexport * from './types';\nexport * from './MockList';\n/**\n * Will create `MockStore` for the given `schema`.\n *\n * A `MockStore` will generate mock values for the given schem when queried.\n *\n * It will stores generated mocks, so that, provided with same arguments\n * the returned values will be the same.\n *\n * Its API also allows to modify the stored values.\n *\n * Basic example:\n * ```ts\n * store.get('User', 1, 'name');\n * // > \"Hello World\"\n * store.set('User', 1, 'name', 'Alexandre');\n * store.get('User', 1, 'name');\n * // > \"Alexandre\"\n * ```\n *\n * The storage key will correspond to the \"key field\"\n * of the type. Field with name `id` or `_id` will be\n * by default considered as the key field for the type.\n * However, use `typePolicies` to precise the field to use\n * as key.\n */\nexport function createMockStore(options) {\n    return new MockStore(options);\n}\n//# sourceMappingURL=index.js.map"],"names":["assertIsDefined","isNullableType","getNullableType","isCompositeType","isAbstractType","isListType","isScalarType","isEnumType","isObjectType","GraphQLString","isInterfaceType","schema","isSchema","defaultFieldResolver","mapSchema","MapperKind","isUnionType","GraphQLUnionType","GraphQLInterfaceType","addResolversToSchema","buildSchemaFromTypeDefinitions","graphql"],"mappings":"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"}