@host = 192.168.1.31
@port = 7443
@uri = https://{{host}}:{{port}}/graphql
@contentType = application/json
@requestType = GraphQL

@userLoginUsername = admin
@userLoginPassword = 12345678
@userResgisterPassword = Aa123#12
@userIdAdmin = efeed3eb-c0a2-4b3e-816f-2a42ca8451b3

### mutation: userLogin

// @name userLogin
POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation userLogin($loginUserData: LoginUserInput!) {
	userLogin(loginUserData: $loginUserData) {
		accessToken
		user {
			id
			username
			email
			roles
		}
	}
}

{
	"loginUserData": {
		"username": "{{userLoginUsername}}",
		"password": "{{userLoginPassword}}"
	}
}

### mutation: userRegister

// @name userRegister
POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation userRegister($newUserData: NewUserInput!){
  userRegister(newUserData: $newUserData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

{
  "newUserData": {
    "username": "petedoe",
    "password": "{{userResgisterPassword}}",
    "firstName": "Jake",
    "lastName": "Doe",
    "email": "petedoe@example.com",
    "metaData": {
      "key": "value"
    }
  }
}

### mutations: userLogout

// @name userLogout
POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation userLogout {
  userLogout
}

### mutations: revokeUserRefreshTokens [DEV]

# used in development to refoke refresh token

// @name revokeUserRefreshTokens
POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation revokeUserRefreshTokens($username: String!){
  revokeUserRefreshTokens(username: $username)
}

{
	"username": "johndoe"
}

### query: users

// @name users
@authToken = {{userLogin.response.body.$.data.userLogin.accessToken}}

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

query users($skip: Int, $take: Int) {
  users(skip: $skip, take: $take) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData
  }
}

{
	"skip": 0,
	"take": 5
}

### query: userById

// @name userById

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

query userById($id: String!){
  userById(id:$id) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    metaData   
  }
}

{
  "id": "{{userIdAdmin}}"
}
