// @host = 192.168.1.31
@host = 127.0.0.1
@port = 3443
// @port = 443

@baseUri = https://{{host}}:{{port}}
@gqlUri = {{baseUri}}/graphql
@contentType = application/json
@requestType = GraphQL

@userLoginAdmin = admin
@userLoginJohnDoe = johndoe
@userLoginPassword = 12345678
@userIdAdmin = efeed3eb-c0a2-4b3e-816f-2a42ca8451b3
@userIdJohnDoe = 520c2eb5-e83b-4ef5-a343-85756bcce149
@authToken = {{userLogin.response.body.$.data.userLogin.accessToken}}



### mutation: userLogin
// @name userLogin
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation userLogin($loginUserData: LoginUserInput!) {
	userLogin(loginUserData: $loginUserData) {
		accessToken
		user {
			id
			username
			email
			roles
		}
	}
}

{
	"loginUserData": {
		"username": "{{userLoginAdmin}}",
		// "username": "{{userLoginJohnDoe}}",
		"password": "{{userLoginPassword}}" 
	}
}

### mutation: userLogout
// @name userLogout
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation userLogout {
	userLogout
}

### authRefreshToken
// @name authRefreshToken
// when refresh token always sent new authTokens
// authToken and refreshToken (cookie)
// it will fail after we increase version with authRevokeRefreshToken, logout etc, 
// the version of inMemory doesn't match the version of refresh token

POST {{baseUri}}/refresh-token HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

### mutation: revokeUserRefreshTokens
// @name revokeUserRefreshTokens
// warn for revoke token works we must use the right user
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation revokeUserRefreshTokens($username: String!) {
	revokeUserRefreshTokens(username: $username)
}

{
	"username": "{{userLoginAdmin}}"
}

### mutation: userProfile
// @name userProfile
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query userProfile{
  userProfile {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    createdDate
    metaData
	}
}

### query: users
// @name users

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query users($skip: Int, $take: Int) {
  users(skip: $skip, take: $take) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    createdBy
    metaData
  }
}

{
  // to skip page 1(skip=10) using pages of 10(take=10), we use skip=10, take10 and we have a second page, records 11...20
	"skip": 0,
	"take": 10
}

### query: userById
// @name userById

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query userById($id: String!) {
  userById(id: $id) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    createdBy
    metaData
  }
}

{
	"id": "{{userIdAdmin}}"
}

### query: userByUsername
// @name userByUsername

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query userByUsername($username: String!) {
  userByUsername(username: $username) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    createdBy
    metaData
  }
}

{
	"username": "{{userLoginJohnDoe}}"
}

### query: userRegister
// @name userRegister

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation userRegister($newUserData: NewUserInput!){
  userRegister(newUserData: $newUserData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    createdBy
    metaData
  }
}

{
	"newUserData": {
		"username": "koakh",
		"password": "12345678",
		"firstName": "MÃ¡rio",
		"lastName": "Monteiro",
		"email": "mail@koakh.com",
		"metaData": { 
			"key": "new user registered"
		}
	}
}	

### mutations update: userUpdate

// @name userUpdate
// neo4j: MATCH (n:User {id:"4ea88521-031b-4279-9165-9c10e1839002"}) RETURN n.roles, n.metaDataInternal

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation userUpdate($updateUserData: UpdateUserInput!) {
  userUpdate(updateUserData: $updateUserData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    createdBy
    metaData
  }
}

{
	"updateUserData": {
    // johndoe can't update, must fail, required a ROLE_ADMIN
    "id": "{{userIdJohnDoe}}",
		"email": "another@koakh.com",
		// "roles": [
		// 	"USER",
		// 	"MANAGER",
		// 	"ADMIN"
		// ],
		"metaData": {
			"key": "valueUpdatedAgain"
		}
	}
}

### mutations delete: userDelete

// @name userDelete
// neo4j: MATCH (n:User {id:"4ea88521-031b-4279-9165-9c10e1839002"}) RETURN n.roles, n.metaDataInternal

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation userDelete($deleteUserData: DeleteUserInput!) {
  userDelete(deleteUserData: $deleteUserData) {
    id
  }
}

{
	"deleteUserData": {
    "id": "{{userIdJohnDoe}}"
	}
}

### mutations update: userUpdatePassword

// @name userUpdatePassword
// neo4j:

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation userUpdatePassword($updateUserPasswordData: UpdateUserPasswordInput!) {
  userUpdatePassword(updateUserPasswordData: $updateUserPasswordData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    createdBy
    metaData
  }
}

{
	"updateUserPasswordData": {
    // TODO here must be the logged user, or if id is empty
		"id": "{{userIdAdmin}}",
		"password": "87654321"
	}
}

### mutations update: userUpdateProfile

// @name userUpdateProfile
// neo4j:  MATCH (n:User {id:"b2756e4d-0b69-49cd-a446-64c884e01f9e"}) RETURN n.id,n.email,n.mobilePhone,n.postal,n.city,n.region,n.geoLocation,n.timezone,n.useralInfo,n.metaData

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation userUpdateProfile($updateUserProfileData: UpdateUserProfileInput!) {
  userUpdateProfile(updateUserProfileData: $updateUserProfileData) {
    id
    username
    firstName
    lastName
    email
    roles
    createdDate
    createdBy
    metaData
  }
}

{
	"updateUserProfileData": {
		"email": "profileupdated@example.com",
		"metaData": {
			"key": "metaDataUpdated on profile"
		}
	}
}

### subscriptions to be used in graphql playground

subscription userLogged{
  userLogged
}

subscription userAdded {
  userAdded {
    id
  }
}

subscription userUpdated {
  userUpdated {
    id
  }
}

subscription userPasswordUpdated {
  userPasswordUpdated {
    id
  }
}

subscription userProfileUpdated {
  userProfileUpdated {
    id
  }
}
