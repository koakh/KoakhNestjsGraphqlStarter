// @host = 192.168.1.31
@host = 127.0.0.1
@port = 3443
// @port = 443

@baseUri = https://{{host}}:{{port}}
@gqlUri = {{baseUri}}/graphql
@contentType = application/json
@requestType = GraphQL

@userLoginUsername = admin
@userLoginPassword = 12345678
@userIdAdmin = efeed3eb-c0a2-4b3e-816f-2a42ca8451b3
@userJohnDoe = 520c2eb5-e83b-4ef5-a343-85756bcce149
@authToken = {{userLogin.response.body.$.data.userLogin.accessToken}}

### mutation: userLogin
// @name userLogin
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation userLogin($loginUserData: LoginUserInput!) {
	userLogin(loginUserData: $loginUserData) {
		accessToken
		user {
			id
			username
			email
			roles
		}
	}
}

{
	"loginUserData": {
		"username": "{{userLoginUsername}}",
		"password": "{{userLoginPassword}}"
	}
}

### mutation: userLogout
// @name userLogout
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

mutation userLogout {
	userLogout
}

### authRefreshToken
// @name authRefreshToken
// when refresh token always sent new authTokens
// authToken and refreshToken (cookie)
// it will fail after we increase version with authRevokeRefreshToken, logout etc, 
// the version of inMemory doesn't match the version of refresh token

POST {{gqlUri}}/auth/refresh-token HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
}

### mutation: userProfile
// @name userProfile
POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
Authorization: Bearer {{authToken}}

query userProfile{
  userProfile {
		id
		username
		email
		roles
	}
}




mutation revokeUserRefreshTokens($username: String!){
  revokeUserRefreshTokens(username: $username)
}

{
	"username": "johndoe"
}







### mutations update: userUpdate

// @name userUpdate
// neo4j: MATCH (n:User {id:"4ea88521-031b-4279-9165-9c10e1839002"}) RETURN n.roles, n.metaDataInternal

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation userUpdate($updateUserData: UpdateUserInput!) {
  userUpdate(updateUserData: $updateUserData) {
    id
    roles
    metaDataInternal
  }
}

{
	"updateUserData": {
		"id": "{{userIdJohn}}",
		"roles": [
			"USER",
			"MANAGER",
			"ADMIN"
		],
		"metaDataInternal": {
			"key": "valueUpdated"
		}
	}
}

### mutations update: userUpdatePassword

// @name userUpdatePassword
// neo4j:

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation userUpdatePassword($updateUserPasswordData: UpdateUserPasswordInput!) {
  userUpdatePassword(updateUserPasswordData: $updateUserPasswordData) {
    id
    username
  }
}

{
	"updateUserPasswordData": {
		"id": "{{userId}}",
		"password": "87654321"
	}
}

### mutations update: userUpdateProfile

// @name userUpdateProfile
// neo4j:  MATCH (n:User {id:"b2756e4d-0b69-49cd-a446-64c884e01f9e"}) RETURN n.id,n.email,n.mobilePhone,n.postal,n.city,n.region,n.geoLocation,n.timezone,n.useralInfo,n.metaData

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation userUpdateProfile($updateUserProfileData: UpdateUserProfileInput!) {
  userUpdateProfile(updateUserProfileData: $updateUserProfileData) {
    id
    username
    email
    mobilePhone
    postal
    city
    region
    geoLocation
    timezone
    useralInfo
    metaData
  }
}

{
	"updateUserProfileData": {
		"id": "{{userId}}",
		"email": "emailUpdated2@example.com",
		"mobilePhone": "mobilePhoneUpdated2",
		"postal": "postalUpdated",
		"city": "cityUpdated",
		"region": "regionUpdated",
		"geoLocation": "geoLocationUpdated",
		"timezone": "timezoneUpdated",
		"useralInfo": "useralInfoUpdated",
		"metaData": {
			"key": "metaDataUpdated"
		}
	}
}

### subscriptions to be used in graphql playground

subscription userLogged{
  userLogged
}

subscription userAdded {
  userAdded {
    id
  }
}

subscription userUpdated {
  userUpdated {
    id
  }
}

subscription userPasswordUpdated {
  userPasswordUpdated {
    id
  }
}

subscription userProfileUpdated {
  userProfileUpdated {
    id
  }
}
